import tensorflow as tf
import numpy as np
import random
import os
import sklearn.metrics

class ReadSequenceData(object):

    def __init__(self, feature_dir):
        self.max_seq_len = 100 # 20s / (0.2s / timestep)
        self.num_features = 384
        self.data = []
        self.labels = []
        self.seq_len = []
        for filename in os.listdir(feature_dir):
            subject, clip, label = filename.split('_')
            data = np.load(feature_dir + "/" + filename)
            length = data.shape[0]
            padded_data = np.zeros((self.max_seq_len, self.num_features))
            padded_data[:length, :self.num_features] += data
            self.data.append(padded_data)
            self.labels.append([1., 0.] if label[:4] == "True" else [0., 1.])
            self.seq_len.append(length)
        self.batch_id = 0

    def next(self, batch_size):
        if self.batch_id >= len(self.data):
            self.batch_id = 0
        batch_data = (self.data[self.batch_id:min(self.batch_id + batch_size, len(self.data))])
        batch_labels = (self.labels[self.batch_id:min(self.batch_id + batch_size, len(self.data))])
        batch_seqlen = (self.seq_len[self.batch_id:min(self.batch_id + batch_size, len(self.data))])
        self.batch_id = min(self.batch_id + batch_size, len(self.data))
        return batch_data, batch_labels, batch_seqlen

# Parameters
learning_rate = 0.01
training_iters = 100000
batch_size = 128
display_step = 10

# Network Parameters
seq_max_len = 100 # Sequence max length
n_hidden = 64 # hidden layer num of features
n_classes = 2 # linear sequence or not

DATA_DIR = "/afs/ir/users/j/w/jwlouie/cs224s/final-project/cs224s-project/raw_data"
TRAIN_DIR = DATA_DIR + "/rnn_train"
trainset = ReadSequenceData(DATA_DIR + "/rnn_train")
testset = ReadSequenceData(DATA_DIR + "/rnn_test")

# tf Graph input
x = tf.placeholder("float", [None, seq_max_len, trainset.num_features])
y = tf.placeholder("float", [None, n_classes])
# A placeholder for indicating each sequence length
seqlen = tf.placeholder(tf.int32, [None])

# Define weights
weights = {
    'out': tf.Variable(tf.random_normal([n_hidden, n_classes]))
}
biases = {
    'out': tf.Variable(tf.random_normal([n_classes]))
}


def dynamicRNN(x, seqlen, weights, biases):

    # Prepare data shape to match `rnn` function requirements
    # Current data input shape: (batch_size, n_steps, n_input)
    # Required shape: 'n_steps' tensors list of shape (batch_size, n_input)
    
    # Unstack to get a list of 'n_steps' tensors of shape (batch_size, n_input)
    x = tf.unstack(x, seq_max_len, 1)

    # Define a lstm cell with tensorflow
    lstm_cell = tf.contrib.rnn.BasicLSTMCell(n_hidden)
    lstm_cell = tf.contrib.rnn.DropoutWrapper(lstm_cell, input_keep_prob=0.8)

    # Get lstm cell output, providing 'sequence_length' will perform dynamic
    # calculation.
    outputs, states = tf.contrib.rnn.static_rnn(lstm_cell, x, dtype=tf.float32,
                                sequence_length=seqlen)

    # When performing dynamic calculation, we must retrieve the last
    # dynamically computed output, i.e., if a sequence length is 10, we need
    # to retrieve the 10th output.
    # However TensorFlow doesn't support advanced indexing yet, so we build
    # a custom op that for each sample in batch size, get its length and
    # get the corresponding relevant output.

    # 'outputs' is a list of output at every timestep, we pack them in a Tensor
    # and change back dimension to [batch_size, n_step, n_input]
    outputs = tf.stack(outputs)
    outputs = tf.transpose(outputs, [1, 0, 2])

    # Hack to build the indexing and retrieve the right output.
    batch_size = tf.shape(outputs)[0]
    # Start indices for each sample
    index = tf.range(0, batch_size) * seq_max_len + (seqlen - 1)
    # Indexing
    outputs = tf.gather(tf.reshape(outputs, [-1, n_hidden]), index)

    # Linear activation, using outputs computed above
    return tf.matmul(outputs, weights['out']) + biases['out']

pred = dynamicRNN(x, seqlen, weights, biases)

# Define loss and optimizer
cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(logits=pred, labels=y))
optimizer = tf.train.GradientDescentOptimizer(learning_rate=learning_rate).minimize(cost)

# Evaluate model
correct_pred = tf.equal(tf.argmax(pred,1), tf.argmax(y,1))
accuracy = tf.reduce_mean(tf.cast(correct_pred, tf.float32))
y_p = tf.argmax(pred, 1)

# Initializing the variables
init = tf.global_variables_initializer()

feed_dict_test = {x: testset.data, y: testset.labels, seqlen: testset.seq_len}

# Launch the graph
with tf.Session() as sess:
    sess.run(init)
    step = 1
    # Keep training until reach max iterations
    while step * batch_size < training_iters:
        batch_x, batch_y, batch_seqlen = trainset.next(batch_size)
        feed_dict_train = {x: batch_x, y: batch_y, seqlen: batch_seqlen}
        # Run optimization op (backprop)
        sess.run(optimizer, feed_dict=feed_dict_train)
        if step % display_step == 0:
            # Calculate batch accuracy
            acc_train, loss  = sess.run([accuracy, cost], \
                                        feed_dict=feed_dict_train)
            acc_test, y_pred = sess.run([accuracy, y_p], \
                                        feed_dict=feed_dict_test)
            y_true = np.argmax(testset.labels, 1)
            f1_score = sklearn.metrics.f1_score(y_true, y_pred)

            print("Iter " + str(step*batch_size) + \
                  ", Minibatch Loss = " + "{:.6f}".format(loss) + \
                  ", Train Acc = " + "{:.5f}".format(acc_train) + \
                  ", Test Acc = " + "{:.5f}".format(acc_test) + \
                  ", Test F1 = " + "{:.5f}".format(f1_score))
        step += 1
    print("Optimization Finished!")

    # Calculate accuracy
    test_data = testset.data
    test_label = testset.labels
    test_seqlen = testset.seq_len
    print("Testing Accuracy:", \
        sess.run(accuracy, feed_dict={x: test_data, y: test_label,
                                      seqlen: test_seqlen}))
